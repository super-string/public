//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/download/study\test.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="testParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface ItestListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInput([NotNull] testParser.InputContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.input"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInput([NotNull] testParser.InputContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mnemonic_inst</c>
	/// labeled alternative in <see cref="testParser.mnemonic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMnemonic_inst([NotNull] testParser.Mnemonic_instContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mnemonic_inst</c>
	/// labeled alternative in <see cref="testParser.mnemonic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMnemonic_inst([NotNull] testParser.Mnemonic_instContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mnemonic_instonly</c>
	/// labeled alternative in <see cref="testParser.mnemonic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMnemonic_instonly([NotNull] testParser.Mnemonic_instonlyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mnemonic_instonly</c>
	/// labeled alternative in <see cref="testParser.mnemonic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMnemonic_instonly([NotNull] testParser.Mnemonic_instonlyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mnemonic_comment</c>
	/// labeled alternative in <see cref="testParser.mnemonic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMnemonic_comment([NotNull] testParser.Mnemonic_commentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mnemonic_comment</c>
	/// labeled alternative in <see cref="testParser.mnemonic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMnemonic_comment([NotNull] testParser.Mnemonic_commentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.inst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInst([NotNull] testParser.InstContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.inst"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInst([NotNull] testParser.InstContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_indirect</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_indirect([NotNull] testParser.Ope_indirectContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_indirect</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_indirect([NotNull] testParser.Ope_indirectContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_indexref</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_indexref([NotNull] testParser.Ope_indexrefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_indexref</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_indexref([NotNull] testParser.Ope_indexrefContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_device</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_device([NotNull] testParser.Ope_deviceContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_device</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_device([NotNull] testParser.Ope_deviceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_local</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_local([NotNull] testParser.Ope_localContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_local</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_local([NotNull] testParser.Ope_localContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_tm</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_tm([NotNull] testParser.Ope_tmContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_tm</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_tm([NotNull] testParser.Ope_tmContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_direct</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_direct([NotNull] testParser.Ope_directContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_direct</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_direct([NotNull] testParser.Ope_directContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_unknown</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_unknown([NotNull] testParser.Ope_unknownContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_unknown</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_unknown([NotNull] testParser.Ope_unknownContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ope_literal</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpe_literal([NotNull] testParser.Ope_literalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ope_literal</c>
	/// labeled alternative in <see cref="testParser.operand"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpe_literal([NotNull] testParser.Ope_literalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.device"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDevice([NotNull] testParser.DeviceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.device"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDevice([NotNull] testParser.DeviceContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dv_real</c>
	/// labeled alternative in <see cref="testParser.direct_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDv_real([NotNull] testParser.Dv_realContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dv_real</c>
	/// labeled alternative in <see cref="testParser.direct_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDv_real([NotNull] testParser.Dv_realContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dv_dec</c>
	/// labeled alternative in <see cref="testParser.direct_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDv_dec([NotNull] testParser.Dv_decContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dv_dec</c>
	/// labeled alternative in <see cref="testParser.direct_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDv_dec([NotNull] testParser.Dv_decContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dev_exp</c>
	/// labeled alternative in <see cref="testParser.direct_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDev_exp([NotNull] testParser.Dev_expContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dev_exp</c>
	/// labeled alternative in <see cref="testParser.direct_value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDev_exp([NotNull] testParser.Dev_expContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.local"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocal([NotNull] testParser.LocalContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.local"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocal([NotNull] testParser.LocalContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.tm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTm([NotNull] testParser.TmContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.tm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTm([NotNull] testParser.TmContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.indirect"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndirect([NotNull] testParser.IndirectContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.indirect"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndirect([NotNull] testParser.IndirectContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.index_ref"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndex_ref([NotNull] testParser.Index_refContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.index_ref"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndex_ref([NotNull] testParser.Index_refContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="testParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComment([NotNull] testParser.CommentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="testParser.comment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComment([NotNull] testParser.CommentContext context);
}
