//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/download/study\test.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class testParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		UINT=1, SINT=2, DEC=3, IDENT=4, REAL_DOT_DIGIT=5, REAL_FULL=6, REAL_DIGIT_DOT=7, 
		HEX=8, FLOAT=9, EXP=10, SUFFIX=11, LITERAL=12, COMMENT=13, AT=14, QUESTION=15, 
		COLON=16, OPERATOR=17, ASTERISK=18, SHARP=19, EOL=20, WS=21;
	public const int
		RULE_input = 0, RULE_mnemonic = 1, RULE_inst = 2, RULE_operand = 3, RULE_device = 4, 
		RULE_direct_value = 5, RULE_local = 6, RULE_tm = 7, RULE_indirect = 8, 
		RULE_index_ref = 9, RULE_comment = 10;
	public static readonly string[] ruleNames = {
		"input", "mnemonic", "inst", "operand", "device", "direct_value", "local", 
		"tm", "indirect", "index_ref", "comment"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'@'", "'?'", "':'", null, "'*'", "'#'", null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, "UINT", "SINT", "DEC", "IDENT", "REAL_DOT_DIGIT", "REAL_FULL", "REAL_DIGIT_DOT", 
		"HEX", "FLOAT", "EXP", "SUFFIX", "LITERAL", "COMMENT", "AT", "QUESTION", 
		"COLON", "OPERATOR", "ASTERISK", "SHARP", "EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "test.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static testParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public testParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public testParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(testParser.Eof, 0); }
		public ITerminalNode[] EOL() { return GetTokens(testParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(testParser.EOL, i);
		}
		public MnemonicContext[] mnemonic() {
			return GetRuleContexts<MnemonicContext>();
		}
		public MnemonicContext mnemonic(int i) {
			return GetRuleContext<MnemonicContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 22; Match(EOL);
					}
					} 
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT || _la==COMMENT) {
				{
				State = 28; mnemonic();
				State = 37;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 30;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 29; Match(EOL);
							}
							}
							State = 32;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==EOL );
						State = 34; mnemonic();
						}
						} 
					}
					State = 39;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
			}

			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 42; Match(EOL);
				}
			}

			State = 45; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
	 
		public MnemonicContext() { }
		public virtual void CopyFrom(MnemonicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Mnemonic_instonlyContext : MnemonicContext {
		public InstContext inst() {
			return GetRuleContext<InstContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(testParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(testParser.WS, i);
		}
		public Mnemonic_instonlyContext(MnemonicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterMnemonic_instonly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitMnemonic_instonly(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic_instonly(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Mnemonic_instContext : MnemonicContext {
		public InstContext inst() {
			return GetRuleContext<InstContext>(0);
		}
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(testParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(testParser.WS, i);
		}
		public Mnemonic_instContext(MnemonicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterMnemonic_inst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitMnemonic_inst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic_inst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Mnemonic_commentContext : MnemonicContext {
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Mnemonic_commentContext(MnemonicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterMnemonic_comment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitMnemonic_comment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMnemonic_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(Context, State);
		EnterRule(_localctx, 2, RULE_mnemonic);
		int _la;
		try {
			int _alt;
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new Mnemonic_instContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; inst();
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 48; Match(WS);
						}
						}
						State = 51;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==WS );
					State = 53; operand();
					State = 62;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 55;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							do {
								{
								{
								State = 54; Match(WS);
								}
								}
								State = 57;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							} while ( _la==WS );
							State = 59; operand();
							}
							} 
						}
						State = 64;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
					}
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				}
				break;
			case 2:
				_localctx = new Mnemonic_instonlyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; inst();
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 70; Match(WS);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new Mnemonic_commentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(testParser.IDENT, 0); }
		public ITerminalNode SUFFIX() { return GetToken(testParser.SUFFIX, 0); }
		public ITerminalNode OPERATOR() { return GetToken(testParser.OPERATOR, 0); }
		public ITerminalNode ASTERISK() { return GetToken(testParser.ASTERISK, 0); }
		public InstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inst; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterInst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitInst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstContext inst() {
		InstContext _localctx = new InstContext(Context, State);
		EnterRule(_localctx, 4, RULE_inst);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(IDENT);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPERATOR || _la==ASTERISK) {
				{
				State = 80;
				_la = TokenStream.LA(1);
				if ( !(_la==OPERATOR || _la==ASTERISK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUFFIX) {
				{
				State = 83; Match(SUFFIX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
	 
		public OperandContext() { }
		public virtual void CopyFrom(OperandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ope_indexrefContext : OperandContext {
		public Index_refContext index_ref() {
			return GetRuleContext<Index_refContext>(0);
		}
		public Ope_indexrefContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_indexref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_indexref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_indexref(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ope_directContext : OperandContext {
		public Direct_valueContext direct_value() {
			return GetRuleContext<Direct_valueContext>(0);
		}
		public Ope_directContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_direct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_direct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_direct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ope_indirectContext : OperandContext {
		public IndirectContext indirect() {
			return GetRuleContext<IndirectContext>(0);
		}
		public Ope_indirectContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_indirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_indirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_indirect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ope_localContext : OperandContext {
		public LocalContext local() {
			return GetRuleContext<LocalContext>(0);
		}
		public Ope_localContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_local(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_local(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_local(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ope_tmContext : OperandContext {
		public TmContext tm() {
			return GetRuleContext<TmContext>(0);
		}
		public Ope_tmContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_tm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_tm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_tm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ope_deviceContext : OperandContext {
		public DeviceContext device() {
			return GetRuleContext<DeviceContext>(0);
		}
		public Ope_deviceContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_device(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_device(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_device(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ope_literalContext : OperandContext {
		public ITerminalNode LITERAL() { return GetToken(testParser.LITERAL, 0); }
		public Ope_literalContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_literal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Ope_unknownContext : OperandContext {
		public ITerminalNode[] QUESTION() { return GetTokens(testParser.QUESTION); }
		public ITerminalNode QUESTION(int i) {
			return GetToken(testParser.QUESTION, i);
		}
		public Ope_unknownContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterOpe_unknown(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitOpe_unknown(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpe_unknown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 6, RULE_operand);
		int _la;
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new Ope_indirectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; indirect();
				}
				break;
			case 2:
				_localctx = new Ope_indexrefContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; index_ref();
				}
				break;
			case 3:
				_localctx = new Ope_deviceContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; device();
				}
				break;
			case 4:
				_localctx = new Ope_localContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; local();
				}
				break;
			case 5:
				_localctx = new Ope_tmContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 90; tm();
				}
				break;
			case 6:
				_localctx = new Ope_directContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 91; direct_value();
				}
				break;
			case 7:
				_localctx = new Ope_unknownContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 92; Match(QUESTION);
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==QUESTION );
				}
				break;
			case 8:
				_localctx = new Ope_literalContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 97; Match(LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeviceContext : ParserRuleContext {
		public ITerminalNode UINT() { return GetToken(testParser.UINT, 0); }
		public ITerminalNode IDENT() { return GetToken(testParser.IDENT, 0); }
		public ITerminalNode REAL_DOT_DIGIT() { return GetToken(testParser.REAL_DOT_DIGIT, 0); }
		public DeviceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_device; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterDevice(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitDevice(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDevice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeviceContext device() {
		DeviceContext _localctx = new DeviceContext(Context, State);
		EnterRule(_localctx, 8, RULE_device);
		int _la;
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; Match(UINT);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(IDENT);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REAL_DOT_DIGIT) {
					{
					State = 102; Match(REAL_DOT_DIGIT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Direct_valueContext : ParserRuleContext {
		public Direct_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direct_value; } }
	 
		public Direct_valueContext() { }
		public virtual void CopyFrom(Direct_valueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Dv_realContext : Direct_valueContext {
		public ITerminalNode REAL_FULL() { return GetToken(testParser.REAL_FULL, 0); }
		public ITerminalNode REAL_DIGIT_DOT() { return GetToken(testParser.REAL_DIGIT_DOT, 0); }
		public ITerminalNode REAL_DOT_DIGIT() { return GetToken(testParser.REAL_DOT_DIGIT, 0); }
		public ITerminalNode FLOAT() { return GetToken(testParser.FLOAT, 0); }
		public Dv_realContext(Direct_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterDv_real(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitDv_real(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDv_real(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dv_decContext : Direct_valueContext {
		public ITerminalNode DEC() { return GetToken(testParser.DEC, 0); }
		public ITerminalNode SINT() { return GetToken(testParser.SINT, 0); }
		public ITerminalNode UINT() { return GetToken(testParser.UINT, 0); }
		public ITerminalNode HEX() { return GetToken(testParser.HEX, 0); }
		public Dv_decContext(Direct_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterDv_dec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitDv_dec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDv_dec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Dev_expContext : Direct_valueContext {
		public ITerminalNode EXP() { return GetToken(testParser.EXP, 0); }
		public Dev_expContext(Direct_valueContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterDev_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitDev_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDev_exp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Direct_valueContext direct_value() {
		Direct_valueContext _localctx = new Direct_valueContext(Context, State);
		EnterRule(_localctx, 10, RULE_direct_value);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_FULL:
				_localctx = new Dv_realContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(REAL_FULL);
				}
				break;
			case REAL_DIGIT_DOT:
				_localctx = new Dv_realContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(REAL_DIGIT_DOT);
				}
				break;
			case REAL_DOT_DIGIT:
				_localctx = new Dv_realContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; Match(REAL_DOT_DIGIT);
				}
				break;
			case DEC:
				_localctx = new Dv_decContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 110; Match(DEC);
				}
				break;
			case SINT:
				_localctx = new Dv_decContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 111; Match(SINT);
				}
				break;
			case UINT:
				_localctx = new Dv_decContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 112; Match(UINT);
				}
				break;
			case HEX:
				_localctx = new Dv_decContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 113; Match(HEX);
				}
				break;
			case FLOAT:
				_localctx = new Dv_realContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 114; Match(FLOAT);
				}
				break;
			case EXP:
				_localctx = new Dev_expContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 115; Match(EXP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalContext : ParserRuleContext {
		public ITerminalNode AT() { return GetToken(testParser.AT, 0); }
		public DeviceContext device() {
			return GetRuleContext<DeviceContext>(0);
		}
		public LocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterLocal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitLocal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalContext local() {
		LocalContext _localctx = new LocalContext(Context, State);
		EnterRule(_localctx, 12, RULE_local);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(AT);
			State = 119; device();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TmContext : ParserRuleContext {
		public ITerminalNode SHARP() { return GetToken(testParser.SHARP, 0); }
		public DeviceContext device() {
			return GetRuleContext<DeviceContext>(0);
		}
		public TmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tm; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterTm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitTm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TmContext tm() {
		TmContext _localctx = new TmContext(Context, State);
		EnterRule(_localctx, 14, RULE_tm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(SHARP);
			State = 122; device();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectContext : ParserRuleContext {
		public ITerminalNode ASTERISK() { return GetToken(testParser.ASTERISK, 0); }
		public ITerminalNode IDENT() { return GetToken(testParser.IDENT, 0); }
		public Index_refContext index_ref() {
			return GetRuleContext<Index_refContext>(0);
		}
		public LocalContext local() {
			return GetRuleContext<LocalContext>(0);
		}
		public IndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirect; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterIndirect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitIndirect(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndirectContext indirect() {
		IndirectContext _localctx = new IndirectContext(Context, State);
		EnterRule(_localctx, 16, RULE_indirect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(ASTERISK);
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 125; Match(IDENT);
				}
				break;
			case 2:
				{
				State = 126; index_ref();
				}
				break;
			case 3:
				{
				State = 127; local();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_refContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(testParser.COLON, 0); }
		public ITerminalNode DEC() { return GetToken(testParser.DEC, 0); }
		public ITerminalNode SINT() { return GetToken(testParser.SINT, 0); }
		public ITerminalNode[] UINT() { return GetTokens(testParser.UINT); }
		public ITerminalNode UINT(int i) {
			return GetToken(testParser.UINT, i);
		}
		public ITerminalNode[] IDENT() { return GetTokens(testParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(testParser.IDENT, i);
		}
		public LocalContext local() {
			return GetRuleContext<LocalContext>(0);
		}
		public Index_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterIndex_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitIndex_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_refContext index_ref() {
		Index_refContext _localctx = new Index_refContext(Context, State);
		EnterRule(_localctx, 18, RULE_index_ref);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UINT:
			case IDENT:
				{
				State = 130;
				_la = TokenStream.LA(1);
				if ( !(_la==UINT || _la==IDENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case AT:
				{
				State = 131; local();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 134; Match(COLON);
			State = 135;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UINT) | (1L << SINT) | (1L << DEC) | (1L << IDENT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(testParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItestListener typedListener = listener as ItestListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItestVisitor<TResult> typedVisitor = visitor as ItestVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 20, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', '\x8E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x6', '\x2', '!', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\"', '\x3', 
		'\x2', '\a', '\x2', '&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', 
		'\v', '\x2', '\x5', '\x2', '+', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'.', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '\x34', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x35', 
		'\x3', '\x3', '\x3', '\x3', '\x6', '\x3', ':', '\n', '\x3', '\r', '\x3', 
		'\xE', '\x3', ';', '\x3', '\x3', '\a', '\x3', '?', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x42', '\v', '\x3', '\x6', '\x3', '\x44', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\x45', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', 'J', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'M', '\v', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'P', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', 'T', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', 'W', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '`', '\n', '\x5', '\r', 
		'\x5', '\xE', '\x5', '\x61', '\x3', '\x5', '\x5', '\x5', '\x65', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'j', '\n', 
		'\x6', '\x5', '\x6', 'l', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', 'w', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x83', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x87', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\x1B', '\x2', 
		'\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x5', '\x3', '\x2', '\x13', '\x14', '\x4', '\x2', '\x3', 
		'\x3', '\x6', '\x6', '\x3', '\x2', '\x3', '\x6', '\x2', '\xA5', '\x2', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x4', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'Q', '\x3', '\x2', '\x2', '\x2', '\b', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'k', '\x3', '\x2', '\x2', '\x2', '\f', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'x', '\x3', '\x2', '\x2', '\x2', '\x10', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '~', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x1A', '\a', '\x16', '\x2', '\x2', '\x19', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '*', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\'', '\x5', '\x4', '\x3', '\x2', '\x1F', 
		'!', '\a', '\x16', '\x2', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', 
		'\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', 
		'\x2', '\x2', '$', '&', '\x5', '\x4', '\x3', '\x2', '%', ' ', '\x3', '\x2', 
		'\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '+', 
		'\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', '-', '\x3', '\x2', '\x2', '\x2', ',', '.', '\a', '\x16', '\x2', '\x2', 
		'-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x2', '\x2', 
		'\x3', '\x30', '\x3', '\x3', '\x2', '\x2', '\x2', '\x31', '\x43', '\x5', 
		'\x6', '\x4', '\x2', '\x32', '\x34', '\a', '\x17', '\x2', '\x2', '\x33', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'@', '\x5', '\b', '\x5', '\x2', '\x38', ':', '\a', '\x17', '\x2', '\x2', 
		'\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '?', '\x5', '\b', 
		'\x5', '\x2', '>', '\x39', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'P', '\x3', '\x2', '\x2', '\x2', 'G', 'K', '\x5', '\x6', '\x4', 
		'\x2', 'H', 'J', '\a', '\x17', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'M', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', '\x16', 
		'\f', '\x2', 'O', '\x31', '\x3', '\x2', '\x2', '\x2', 'O', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\a', '\x6', '\x2', '\x2', 'R', 
		'T', '\t', '\x2', '\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 
		'U', 'W', '\a', '\r', '\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\x65', '\x5', '\x12', '\n', '\x2', 'Y', '\x65', '\x5', '\x14', 
		'\v', '\x2', 'Z', '\x65', '\x5', '\n', '\x6', '\x2', '[', '\x65', '\x5', 
		'\xE', '\b', '\x2', '\\', '\x65', '\x5', '\x10', '\t', '\x2', ']', '\x65', 
		'\x5', '\f', '\a', '\x2', '^', '`', '\a', '\x11', '\x2', '\x2', '_', '^', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\a', 
		'\xE', '\x2', '\x2', '\x64', 'X', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x64', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '[', '\x3', '\x2', '\x2', '\x2', '\x64', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x64', ']', '\x3', '\x2', '\x2', '\x2', '\x64', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'l', '\a', '\x3', '\x2', '\x2', 'g', 
		'i', '\a', '\x6', '\x2', '\x2', 'h', 'j', '\a', '\a', '\x2', '\x2', 'i', 
		'h', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 
		'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'g', '\x3', '\x2', '\x2', '\x2', 'l', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'w', '\a', '\b', '\x2', '\x2', 'n', 'w', '\a', '\t', 
		'\x2', '\x2', 'o', 'w', '\a', '\a', '\x2', '\x2', 'p', 'w', '\a', '\x5', 
		'\x2', '\x2', 'q', 'w', '\a', '\x4', '\x2', '\x2', 'r', 'w', '\a', '\x3', 
		'\x2', '\x2', 's', 'w', '\a', '\n', '\x2', '\x2', 't', 'w', '\a', '\v', 
		'\x2', '\x2', 'u', 'w', '\a', '\f', '\x2', '\x2', 'v', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'n', '\x3', '\x2', '\x2', '\x2', 'v', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'p', '\x3', '\x2', '\x2', '\x2', 'v', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'r', '\x3', '\x2', '\x2', '\x2', 'v', 's', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\r', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', '\x10', 
		'\x2', '\x2', 'y', 'z', '\x5', '\n', '\x6', '\x2', 'z', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '\x15', '\x2', '\x2', '|', '}', '\x5', 
		'\n', '\x6', '\x2', '}', '\x11', '\x3', '\x2', '\x2', '\x2', '~', '\x82', 
		'\a', '\x14', '\x2', '\x2', '\x7F', '\x83', '\a', '\x6', '\x2', '\x2', 
		'\x80', '\x83', '\x5', '\x14', '\v', '\x2', '\x81', '\x83', '\x5', '\xE', 
		'\b', '\x2', '\x82', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x13', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\t', '\x3', 
		'\x2', '\x2', '\x85', '\x87', '\x5', '\xE', '\b', '\x2', '\x86', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x12', 
		'\x2', '\x2', '\x89', '\x8A', '\t', '\x4', '\x2', '\x2', '\x8A', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '\xF', '\x2', '\x2', 
		'\x8C', '\x17', '\x3', '\x2', '\x2', '\x2', '\x16', '\x1B', '\"', '\'', 
		'*', '-', '\x35', ';', '@', '\x45', 'K', 'O', 'S', 'V', '\x61', '\x64', 
		'i', 'k', 'v', '\x82', '\x86',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
